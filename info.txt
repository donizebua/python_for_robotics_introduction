pip -> adalah manajer paket Python yang digunakan untuk menginstal dan mengelola pustaka eksternal (dan juga pustaka dari repositori Python Package Index (PyPI)). Dengan menggunakan pip, kamu bisa menginstal pustaka eksternal ke dalam lingkungan Python kamu. Contoh perintah pip untuk menginstal pustaka eksternal:

(c) pip install numpy -> Menginstal pustaka eksternal NumPy

Untuk memeriksa path yang digunakan Python untuk mencari pustaka, kamu bisa menggunakan kode berikut:

(c)
import sys
print(sys.path)

*jika kamu sudah memiliki pustaka dalam bentuk arsip lokal, kamu bisa menginstalnya dengan cara:

(c)
pip install path/to/library.tar.gz
pip install path/to/library.whl

*Cara menggunakan PyPI dengan pip: Jika kamu ingin menginstal pustaka dari PyPI, cukup gunakan perintah pip install di terminal atau command prompt:

(c) pip install requests  # Menginstal pustaka 'requests' dari PyPI

(c) python -m unittest discover -> digunakan untuk menguji semua file yang memiliki pola nama "test_*.py" (pola penamaan test default) yang ada dalam current directory.

(c) python -m unittest discover -p "*_test.py" -> sama seperti diatas, hanya saja dengan pola penamaan yang bisa disesuaikan misalnya "*_test.py".

(c) python -m unittest discover -s path/to/another_directory

(c) pip freeze -> adalah perintah di Python yang digunakan untuk menghasilkan daftar semua paket Python yang terinstal dalam lingkungan tertentu beserta versinya

(c) pip freeze > requirements.txt -> Membuat requirements.txt: Anda bisa menyimpan daftar ini dalam file requirements.txt untuk mempermudah pengelolaan dependensi.

(c) pip install -r requirements.txt -> Menginstal dependensi dari file requirements.txt: File ini dapat digunakan untuk menginstal semua paket yang sama di lingkungan lain.

Apa Itu Virtual Environment?
Virtual environment (lingkungan virtual) adalah cara untuk membuat lingkungan Python yang terisolasi.

Setiap virtual environment memiliki direktori sendiri untuk menyimpan instalasi Python dan paket, terpisah dari sistem global. Ini berguna untuk memastikan proyek Anda menggunakan dependensi yang sesuai tanpa konflik dengan proyek atau paket lain di sistem Anda.
Keuntungan Virtual Environment:
Menghindari konflik versi paket antar proyek.
Mempermudah pengelolaan dan replikasi lingkungan pengembangan.
Meningkatkan portabilitas proyek (misalnya, saat berbagi requirements.txt).

Untuk memeriksa apakah Anda sedang berada dalam virtual environment atau tidak:

(c)
bash -> which python
windows -> where python

Jika outputnya menunjuk ke folder virtual environment Anda (bukan folder instalasi Python global), maka Anda berada di virtual environment.
(c)
import sys
print(sys.prefix)


membuat virtual environtment :

(c)
python -m venv nama_env

nama_env boleh bebas, tetapi orang orang biasanya membuat .venv supaya rapi

periksa apakah folder venv sudah muncul di direktori proyek Anda:

(c)
dir

cara mengaktifkan venv

(c)
bash -> source .venv/Scripts/activate
cmd -> .venv\Scripts\activate

sekali lagi, .venv hanya nama virtual environtmentnya, bisa bebas penamaannya.

(c) deactivate -> nonaktifkan venv

pada PowerShell, biasanya venv agak susah diaktifkan karena regulasinya yang menentang kode sembarangan berjalan.
Jika masih gagal, kemungkinan besar PowerShell mencegah skrip berjalan. Anda dapat memeriksa execution policy dengan perintah:

(c)
Get-ExecutionPolicy

Jika hasilnya Restricted, ubah menjadi RemoteSigned agar PowerShell mengizinkan skrip berjalan:

(c)
Set-ExecutionPolicy RemoteSigned -Scope CurrentUser

(c) pip list dan pip freeze -> berguna menampilkan seluruh paket yang sudah terinstal dalam virtual environtment

Anda bisa membersihkan cache pip dengan menjalankan:

(c)
pip cache purge

Untuk memeriksa apakah ada duplikasi, Anda bisa menggunakan perintah:

(c)
pip show numpy
